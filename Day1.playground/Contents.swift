import Foundation

// MARK: - Var√≠aveis

var nome = "HP"
nome = "Athena"
nome = "Zeus"
// vari√°veis podem ser modificadas v√°rias vezes.


// MARK: - Constants
let character = "Pinheiro"
// Uma constante n√£o pode ser modificada.


//Print
var pessoa = "Bud"
print(pessoa)

pessoa = "Pan"
print(pessoa)

pessoa = "J√£o"
print(pessoa)


// MARK: - Camel Case(Cado de Camelo)
let primeiroNome = "Hugo"
let meuCachorro = "J√£o"
let meuSonho = "Ser um bom dev ios"
// Por convens√£o dos programadores vari√°veis com dois nomes s√£o declaradas dessa forma letra min√∫scula no come√ßo e segunda palavra com letra mai√∫scula.


// MARK: Formas de declarar -> String
let ator = "L√°zaro Ramos"
let nomeDoArquivo = "sol.jpg"
let resultado = "üë®üèΩ‚Äçüíª Desenvolvedor üáßüá∑"
let notas = "Lembrar de comprar arroz no \"Mercado\" e ir na padaria"

let filme = """
Um dia
da vida de um
engenheiro da apple
"""
/* OBS: N√£o h√° limites no tamanho na String, s√≥ que swift n√£o gosta de quebrar suas linhas para ficar tudo certinho. logo sendo necess√°rio """ """.
*/


//M√©todos (.count, .uppercased, .hasPrefix(), .hasSuffix())

// Contando quando caracteres tem uma vari√°vel
let contador = ator.count
print(contador)

// transformando toda a string em letra maiuscula
let letraMaiuscula = notas.uppercased()
print(letraMaiuscula)

// Verificando se um vari√°vel/constante come√ßa com determinada String
let consultarInicio = filme.hasPrefix("Um dia")
print(consultarInicio)

// Veridicando se uma vari√°vel/constante termina com determinada String
let consultarFinal = filme.hasSuffix("apple")
print(consultarFinal)

// MARK: - Formas de declarar numeros inteiros -> Int
let numeroGrande = 100000000
let numeroGrandeLegivel = 100_000_000
let numeroGrandeLegivel2 = 1_00_00_00___00
// Formas de declarar o mesmo n√∫mero inteiro

let numero = 10

// Criando inteiros a partir de outros inteiros
let subtra√ß√£o = numero - 2
let soma = numero + 20
let multiplica√ß√£o = numero * 2
let divis√£o = numero / 2
let NumeroAoQuadrado = numero * numero

// Declarando um inteiro e atribuindo um soma a ele mesmo.
var valor = 10
valor += 5 //valor = valor +5

valor *= 2
print(valor)
valor -= 10
print(valor)
valor /= 2
print(valor)

// Met√≥do que verifica se um n√∫mero √© multiplo de outro n√∫mero

let numeroAleatorio = 120
print(numeroAleatorio.isMultiple(of: 2))


// MARK: - Declarando n√∫meros Decimais(Ponto Flutuante) -> Double.

let numerosDecimais = 0.1 + 0.2
print(numerosDecimais) //0.3000000000000004
// Somar numeros decimais √© problem√°tico, pois o m√°quina armazena tudo em bin√°rio e fica complexo passar o valor matem√°tico exatamente.


// N√£o podemos fazer opera√ß√µes matem√°tica entre int e doubles sem converter algum deles.
let a = 1
let b = 1.0
let c = a + Int(b) //Convertendo um tipo
print(c)

// Algumas declara√ß√£o de doubles
let double1 = 3.1
let double2 = 30000.0000
let double3 = 3.0

// Decimais ou ponto Flutuantes aceitam opera√ß√µes como os inteiros
var operacaoDecimais = 10.0
operacaoDecimais += 5.0
operacaoDecimais -= 4.5
operacaoDecimais *= 2.0
operacaoDecimais /= 5.0





















 
 






